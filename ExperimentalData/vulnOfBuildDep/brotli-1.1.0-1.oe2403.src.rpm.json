{
  "bomFormat" : "CycloneDX",
  "specVersion" : "1.5",
  "serialNumber" : "urn:uuid:89f2f6fc-306e-48e8-92bc-c08b1cdccb08",
  "version" : 1,
  "metadata" : {
    "timestamp" : "2025-02-23T12:34:35Z",
    "tools" : [
      {
        "vendor" : "OWASP",
        "name" : "Dependency-Track",
        "version" : "4.10.1"
      }
    ],
    "component" : {
      "name" : "brotli-1.1.0-1.oe2403.src.rpm",
      "version" : "SNAPSHOT",
      "externalReferences" : [
        {
          "type" : "website",
          "url" : "https://github.com/google/brotli"
        }
      ],
      "type" : "application",
      "bom-ref" : "2631d522-4f9a-4d38-a30f-2381c45a030f"
    }
  },
  "components" : [
    {
      "name" : "gcc",
      "version" : "12.3.1",
      "description" : "The gcc package contains the GNU Compiler Collection version 12. You'll need this package in order to compile C code.",
      "licenses" : [
        {
          "license" : {
            "name" : "GPLv3+ and GPLv3+ with exceptions and GPLv2+ with exceptions and LGPLv2+ and BSD"
          }
        }
      ],
      "cpe" : "cpe:2.3:a:*:gcc:12.3.1:*:*:*:*:*:*:*",
      "purl" : "pkg:deb/gcc@12.3.1-38.oe2403?arch=x86_64&upstream=gcc-12.3.1-38.oe2403.src.rpm",
      "externalReferences" : [
        {
          "type" : "website",
          "url" : "https://gcc.gnu.org"
        }
      ],
      "type" : "application",
      "bom-ref" : "a538f586-75e8-4d26-8b8c-9397fbe3cad6"
    },
    {
      "name" : "gcc-c++",
      "version" : "12.3.1",
      "description" : "This package adds C++ support to the GNU Compiler Collection. It includes support for most of the current C++ specification, including templates and exception handling.",
      "licenses" : [
        {
          "license" : {
            "name" : "GPLv3+ and GPLv3+ with exceptions and GPLv2+ with exceptions and LGPLv2+ and BSD"
          }
        }
      ],
      "cpe" : "cpe:2.3:a:*:gcc:12.3.1:*:*:*:*:*:*:*",
      "purl" : "pkg:deb/gcc-c%2B%2B@12.3.1-38.oe2403?arch=x86_64&upstream=gcc-12.3.1-38.oe2403.src.rpm",
      "externalReferences" : [
        {
          "type" : "website",
          "url" : "https://gcc.gnu.org"
        }
      ],
      "type" : "application",
      "bom-ref" : "3d0dba71-5367-4640-9d2e-fdc20716eec4"
    }
  ],
  "dependencies" : [
    {
      "ref" : "2631d522-4f9a-4d38-a30f-2381c45a030f",
      "dependsOn" : [
        "a538f586-75e8-4d26-8b8c-9397fbe3cad6",
        "3d0dba71-5367-4640-9d2e-fdc20716eec4"
      ]
    },
    {
      "ref" : "a538f586-75e8-4d26-8b8c-9397fbe3cad6",
      "dependsOn" : [ ]
    },
    {
      "ref" : "3d0dba71-5367-4640-9d2e-fdc20716eec4",
      "dependsOn" : [ ]
    }
  ],
  "vulnerabilities" : [
    {
      "bom-ref" : "b9e737f0-3967-443c-a30d-353e4436f895",
      "id" : "CVE-2023-4039",
      "source" : {
        "name" : "NVD",
        "url" : "https://nvd.nist.gov/"
      },
      "ratings" : [
        {
          "source" : {
            "name" : "NVD",
            "url" : "https://nvd.nist.gov/"
          },
          "score" : 4.8,
          "severity" : "medium",
          "method" : "CVSSv3",
          "vector" : "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"
        }
      ],
      "description" : "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains that target AArch64 allows an attacker to exploit an existing buffer overflow in dynamically-sized local variables in your application without this being detected. This stack-protector failure only applies to C99-style dynamically-sized local variables or those created using alloca(). The stack-protector operates as intended for statically-sized local variables. The default behavior when the stack-protector detects an overflow is to terminate your application, resulting in controlled loss of availability. An attacker who can exploit a buffer overflow without triggering the stack-protector might be able to change program flow control to cause an uncontrolled loss of availability or to go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
      "published" : "2023-09-13T09:15:00Z",
      "updated" : "2025-02-13T17:17:00Z",
      "affects" : [
        {
          "ref" : "a538f586-75e8-4d26-8b8c-9397fbe3cad6"
        }
      ]
    },
    {
      "bom-ref" : "b9e737f0-3967-443c-a30d-353e4436f895",
      "id" : "CVE-2023-4039",
      "source" : {
        "name" : "NVD",
        "url" : "https://nvd.nist.gov/"
      },
      "ratings" : [
        {
          "source" : {
            "name" : "NVD",
            "url" : "https://nvd.nist.gov/"
          },
          "score" : 4.8,
          "severity" : "medium",
          "method" : "CVSSv3",
          "vector" : "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:L/I:L/A:N"
        }
      ],
      "description" : "**DISPUTED**A failure in the -fstack-protector feature in GCC-based toolchains that target AArch64 allows an attacker to exploit an existing buffer overflow in dynamically-sized local variables in your application without this being detected. This stack-protector failure only applies to C99-style dynamically-sized local variables or those created using alloca(). The stack-protector operates as intended for statically-sized local variables. The default behavior when the stack-protector detects an overflow is to terminate your application, resulting in controlled loss of availability. An attacker who can exploit a buffer overflow without triggering the stack-protector might be able to change program flow control to cause an uncontrolled loss of availability or to go further and affect confidentiality or integrity. NOTE: The GCC project argues that this is a missed hardening bug and not a vulnerability by itself.",
      "published" : "2023-09-13T09:15:00Z",
      "updated" : "2025-02-13T17:17:00Z",
      "affects" : [
        {
          "ref" : "3d0dba71-5367-4640-9d2e-fdc20716eec4"
        }
      ]
    }
  ]
}